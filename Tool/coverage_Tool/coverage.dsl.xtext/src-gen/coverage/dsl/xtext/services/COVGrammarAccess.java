/*
 * generated by Xtext 2.28.0
 */
package coverage.dsl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class COVGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DomainSpecificCoverageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.DomainSpecificCoverage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cImportKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMetamodelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetamodelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMetamodelEPackageCrossReference_5_0 = (CrossReference)cMetamodelAssignment_5.eContents().get(0);
		private final RuleCall cMetamodelEPackageEStringParserRuleCall_5_0_1 = (RuleCall)cMetamodelEPackageCrossReference_5_0.eContents().get(1);
		private final Assignment cContextsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContextsContextParserRuleCall_6_0 = (RuleCall)cContextsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cContextsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_7_1_0 = (RuleCall)cContextsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DomainSpecificCoverage returns DomainSpecificCoverage:
		//    'ruleset'
		//    name=EString
		//    '{'
		//        'import' 'metamodel' metamodel=[ecore::EPackage|EString]
		//        contexts+=Context ( "," contexts+=Context)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ruleset'
		//name=EString
		//'{'
		//    'import' 'metamodel' metamodel=[ecore::EPackage|EString]
		//    contexts+=Context ( "," contexts+=Context)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ruleset'
		public Keyword getRulesetKeyword_0() { return cRulesetKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'import'
		public Keyword getImportKeyword_3() { return cImportKeyword_3; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_4() { return cMetamodelKeyword_4; }
		
		//metamodel=[ecore::EPackage|EString]
		public Assignment getMetamodelAssignment_5() { return cMetamodelAssignment_5; }
		
		//[ecore::EPackage|EString]
		public CrossReference getMetamodelEPackageCrossReference_5_0() { return cMetamodelEPackageCrossReference_5_0; }
		
		//EString
		public RuleCall getMetamodelEPackageEStringParserRuleCall_5_0_1() { return cMetamodelEPackageEStringParserRuleCall_5_0_1; }
		
		//contexts+=Context
		public Assignment getContextsAssignment_6() { return cContextsAssignment_6; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_6_0() { return cContextsContextParserRuleCall_6_0; }
		
		//( "," contexts+=Context)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//contexts+=Context
		public Assignment getContextsAssignment_7_1() { return cContextsAssignment_7_1; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_7_1_0() { return cContextsContextParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetaclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetaclassEClassCrossReference_1_0 = (CrossReference)cMetaclassAssignment_1.eContents().get(0);
		private final RuleCall cMetaclassEClassEStringParserRuleCall_1_0_1 = (RuleCall)cMetaclassEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_3_0_0 = (RuleCall)cRulesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRulesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_3_1_1_0 = (RuleCall)cRulesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Context returns Context:
		//    'context' metaclass=[ecore::EClass|EString]
		//    '{'
		//        (rules+=Rule ( "," rules+=Rule)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' metaclass=[ecore::EClass|EString]
		//'{'
		//    (rules+=Rule ( "," rules+=Rule)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//metaclass=[ecore::EClass|EString]
		public Assignment getMetaclassAssignment_1() { return cMetaclassAssignment_1; }
		
		//[ecore::EClass|EString]
		public CrossReference getMetaclassEClassCrossReference_1_0() { return cMetaclassEClassCrossReference_1_0; }
		
		//EString
		public RuleCall getMetaclassEClassEStringParserRuleCall_1_0_1() { return cMetaclassEClassEStringParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(rules+=Rule ( "," rules+=Rule)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_3_0() { return cRulesAssignment_3_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_0_0() { return cRulesRuleParserRuleCall_3_0_0; }
		
		//( "," rules+=Rule)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_3_1_1() { return cRulesAssignment_3_1_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_1_1_0() { return cRulesRuleParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIgnoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCoverageOfReferencedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCoverageByContentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalIgnoreParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBranchSpecificationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Rule returns Rule:
		//    Ignore | CoverageOfReferenced | CoverageByContent | ConditionalIgnore | BranchSpecification ;
		@Override public ParserRule getRule() { return rule; }
		
		//Ignore | CoverageOfReferenced | CoverageByContent | ConditionalIgnore | BranchSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ignore
		public RuleCall getIgnoreParserRuleCall_0() { return cIgnoreParserRuleCall_0; }
		
		//CoverageOfReferenced
		public RuleCall getCoverageOfReferencedParserRuleCall_1() { return cCoverageOfReferencedParserRuleCall_1; }
		
		//CoverageByContent
		public RuleCall getCoverageByContentParserRuleCall_2() { return cCoverageByContentParserRuleCall_2; }
		
		//ConditionalIgnore
		public RuleCall getConditionalIgnoreParserRuleCall_3() { return cConditionalIgnoreParserRuleCall_3; }
		
		//BranchSpecification
		public RuleCall getBranchSpecificationParserRuleCall_4() { return cBranchSpecificationParserRuleCall_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class IgnoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Ignore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIgnoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIgnoreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSubtypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIgnoreSubtypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIgnoreSubtypesEBooleanParserRuleCall_3_1_0 = (RuleCall)cIgnoreSubtypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDescriptionKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDescriptionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_5_2_0 = (RuleCall)cDescriptionAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Ignore returns Ignore:
		//    {Ignore}
		//    'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
		//        ('{' 'description' description=EString '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Ignore}
		//'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
		//    ('{' 'description' description=EString '}')?
		public Group getGroup() { return cGroup; }
		
		//{Ignore}
		public Action getIgnoreAction_0() { return cIgnoreAction_0; }
		
		//'ignore'
		public Keyword getIgnoreKeyword_1() { return cIgnoreKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('subtypes' ignoreSubtypes=EBoolean)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'subtypes'
		public Keyword getSubtypesKeyword_3_0() { return cSubtypesKeyword_3_0; }
		
		//ignoreSubtypes=EBoolean
		public Assignment getIgnoreSubtypesAssignment_3_1() { return cIgnoreSubtypesAssignment_3_1; }
		
		//EBoolean
		public RuleCall getIgnoreSubtypesEBooleanParserRuleCall_3_1_0() { return cIgnoreSubtypesEBooleanParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('{' 'description' description=EString '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5_1() { return cDescriptionKeyword_5_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_5_2() { return cDescriptionAssignment_5_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_5_2_0() { return cDescriptionEStringParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class ConditionalIgnoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.ConditionalIgnore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIgnoreifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionTypeEnumRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cContainerTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerTypeEClassCrossReference_2_0 = (CrossReference)cContainerTypeAssignment_2.eContents().get(0);
		private final RuleCall cContainerTypeEClassEStringParserRuleCall_2_0_1 = (RuleCall)cContainerTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContainerTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContainerTypeEClassCrossReference_3_1_0 = (CrossReference)cContainerTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cContainerTypeEClassEStringParserRuleCall_3_1_0_1 = (RuleCall)cContainerTypeEClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDescriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_4_2_0 = (RuleCall)cDescriptionAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//ConditionalIgnore returns ConditionalIgnore:
		//    'ignoreif' condition=ConditionType
		//        containerType+=[ecore::EClass|EString] ( "," containerType+=[ecore::EClass|EString])*
		//        ('{' 'description' description=EString '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ignoreif' condition=ConditionType
		//    containerType+=[ecore::EClass|EString] ( "," containerType+=[ecore::EClass|EString])*
		//    ('{' 'description' description=EString '}')?
		public Group getGroup() { return cGroup; }
		
		//'ignoreif'
		public Keyword getIgnoreifKeyword_0() { return cIgnoreifKeyword_0; }
		
		//condition=ConditionType
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ConditionType
		public RuleCall getConditionConditionTypeEnumRuleCall_1_0() { return cConditionConditionTypeEnumRuleCall_1_0; }
		
		//containerType+=[ecore::EClass|EString]
		public Assignment getContainerTypeAssignment_2() { return cContainerTypeAssignment_2; }
		
		//[ecore::EClass|EString]
		public CrossReference getContainerTypeEClassCrossReference_2_0() { return cContainerTypeEClassCrossReference_2_0; }
		
		//EString
		public RuleCall getContainerTypeEClassEStringParserRuleCall_2_0_1() { return cContainerTypeEClassEStringParserRuleCall_2_0_1; }
		
		//( "," containerType+=[ecore::EClass|EString])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//containerType+=[ecore::EClass|EString]
		public Assignment getContainerTypeAssignment_3_1() { return cContainerTypeAssignment_3_1; }
		
		//[ecore::EClass|EString]
		public CrossReference getContainerTypeEClassCrossReference_3_1_0() { return cContainerTypeEClassCrossReference_3_1_0; }
		
		//EString
		public RuleCall getContainerTypeEClassEStringParserRuleCall_3_1_0_1() { return cContainerTypeEClassEStringParserRuleCall_3_1_0_1; }
		
		//('{' 'description' description=EString '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_4_1() { return cDescriptionKeyword_4_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_4_2() { return cDescriptionAssignment_4_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_4_2_0() { return cDescriptionEStringParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class CoverageOfReferencedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.CoverageOfReferenced");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoversKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceEReferenceCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceEReferenceEStringParserRuleCall_1_0_1 = (RuleCall)cReferenceEReferenceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cReferenceEReferenceCrossReference_2_1_0 = (CrossReference)cReferenceAssignment_2_1.eContents().get(0);
		private final RuleCall cReferenceEReferenceEStringParserRuleCall_2_1_0_1 = (RuleCall)cReferenceEReferenceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cDescriptionKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDescriptionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_3_2_0 = (RuleCall)cDescriptionAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//CoverageOfReferenced returns CoverageOfReferenced:
		//    'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
		//        ('{' 'description' description=EString '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
		//    ('{' 'description' description=EString '}')?
		public Group getGroup() { return cGroup; }
		
		//'covers'
		public Keyword getCoversKeyword_0() { return cCoversKeyword_0; }
		
		//reference+=[ecore::EReference|EString]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[ecore::EReference|EString]
		public CrossReference getReferenceEReferenceCrossReference_1_0() { return cReferenceEReferenceCrossReference_1_0; }
		
		//EString
		public RuleCall getReferenceEReferenceEStringParserRuleCall_1_0_1() { return cReferenceEReferenceEStringParserRuleCall_1_0_1; }
		
		//("," reference+=[ecore::EReference|EString])*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//reference+=[ecore::EReference|EString]
		public Assignment getReferenceAssignment_2_1() { return cReferenceAssignment_2_1; }
		
		//[ecore::EReference|EString]
		public CrossReference getReferenceEReferenceCrossReference_2_1_0() { return cReferenceEReferenceCrossReference_2_1_0; }
		
		//EString
		public RuleCall getReferenceEReferenceEStringParserRuleCall_2_1_0_1() { return cReferenceEReferenceEStringParserRuleCall_2_1_0_1; }
		
		//('{' 'description' description=EString '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_1() { return cDescriptionKeyword_3_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_3_2() { return cDescriptionAssignment_3_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_3_2_0() { return cDescriptionEStringParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class CoverageByContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.CoverageByContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoveredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityCoveredContentsEnumRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		private final Assignment cContainmentReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContainmentReferenceEReferenceCrossReference_3_0 = (CrossReference)cContainmentReferenceAssignment_3.eContents().get(0);
		private final RuleCall cContainmentReferenceEReferenceEStringParserRuleCall_3_0_1 = (RuleCall)cContainmentReferenceEReferenceCrossReference_3_0.eContents().get(1);
		private final Keyword cIscoveredKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDescriptionKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDescriptionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_5_2_0 = (RuleCall)cDescriptionAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//CoverageByContent returns CoverageByContent:
		//    'covered' 'when' multiplicity=CoveredContents
		//        containmentReference=[ecore::EReference|EString] 'iscovered'
		//        ('{' 'description' description=EString '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'covered' 'when' multiplicity=CoveredContents
		//    containmentReference=[ecore::EReference|EString] 'iscovered'
		//    ('{' 'description' description=EString '}')?
		public Group getGroup() { return cGroup; }
		
		//'covered'
		public Keyword getCoveredKeyword_0() { return cCoveredKeyword_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//multiplicity=CoveredContents
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }
		
		//CoveredContents
		public RuleCall getMultiplicityCoveredContentsEnumRuleCall_2_0() { return cMultiplicityCoveredContentsEnumRuleCall_2_0; }
		
		//containmentReference=[ecore::EReference|EString]
		public Assignment getContainmentReferenceAssignment_3() { return cContainmentReferenceAssignment_3; }
		
		//[ecore::EReference|EString]
		public CrossReference getContainmentReferenceEReferenceCrossReference_3_0() { return cContainmentReferenceEReferenceCrossReference_3_0; }
		
		//EString
		public RuleCall getContainmentReferenceEReferenceEStringParserRuleCall_3_0_1() { return cContainmentReferenceEReferenceEStringParserRuleCall_3_0_1; }
		
		//'iscovered'
		public Keyword getIscoveredKeyword_4() { return cIscoveredKeyword_4; }
		
		//('{' 'description' description=EString '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5_1() { return cDescriptionKeyword_5_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_5_2() { return cDescriptionAssignment_5_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_5_2_0() { return cDescriptionEStringParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class BranchSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.BranchSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBranchesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionEStringParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cConditionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionEStringParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		private final Assignment cBranchesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBranchesBranchParserRuleCall_7_0 = (RuleCall)cBranchesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cBranchesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cBranchesBranchParserRuleCall_8_1_0 = (RuleCall)cBranchesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BranchSpecification returns BranchSpecification:
		//    'has' 'branches' '{'
		//        'description' description=EString
		//        'condition' condition=EString
		//        branches += Branch (',' branches += Branch)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'has' 'branches' '{'
		//    'description' description=EString
		//    'condition' condition=EString
		//    branches += Branch (',' branches += Branch)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'has'
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }
		
		//'branches'
		public Keyword getBranchesKeyword_1() { return cBranchesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'description'
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }
		
		//description=EString
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_4_0() { return cDescriptionEStringParserRuleCall_4_0; }
		
		//'condition'
		public Keyword getConditionKeyword_5() { return cConditionKeyword_5; }
		
		//condition=EString
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_6_0() { return cConditionEStringParserRuleCall_6_0; }
		
		//branches += Branch
		public Assignment getBranchesAssignment_7() { return cBranchesAssignment_7; }
		
		//Branch
		public RuleCall getBranchesBranchParserRuleCall_7_0() { return cBranchesBranchParserRuleCall_7_0; }
		
		//(',' branches += Branch)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//branches += Branch
		public Assignment getBranchesAssignment_8_1() { return cBranchesAssignment_8_1; }
		
		//Branch
		public RuleCall getBranchesBranchParserRuleCall_8_1_0() { return cBranchesBranchParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryBranchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryEStringParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		
		//Branch returns Branch:
		//    'queryBranch' query=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'queryBranch' query=EString
		public Group getGroup() { return cGroup; }
		
		//'queryBranch'
		public Keyword getQueryBranchKeyword_0() { return cQueryBranchKeyword_0; }
		
		//query=EString
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//EString
		public RuleCall getQueryEStringParserRuleCall_1_0() { return cQueryEStringParserRuleCall_1_0; }
	}
	
	public class CoveredContentsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.CoveredContents");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLALLKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONEONEKeyword_1_0 = (Keyword)cONEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CoveredContents returns CoveredContents:
		//    ALL = 'ALL' | ONE = 'ONE';
		public EnumRule getRule() { return rule; }
		
		//ALL = 'ALL' | ONE = 'ONE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALL = 'ALL'
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }
		
		//'ALL'
		public Keyword getALLALLKeyword_0_0() { return cALLALLKeyword_0_0; }
		
		//ONE = 'ONE'
		public EnumLiteralDeclaration getONEEnumLiteralDeclaration_1() { return cONEEnumLiteralDeclaration_1; }
		
		//'ONE'
		public Keyword getONEONEKeyword_1_0() { return cONEONEKeyword_1_0; }
	}
	public class ConditionTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.ConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContainedByEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContainedByContainedByKeyword_0_0 = (Keyword)cContainedByEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotContainedByEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotContainedByNotContainedByKeyword_1_0 = (Keyword)cNotContainedByEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConditionType returns ConditionType:
		//    ContainedBy = 'containedBy' | NotContainedBy = 'notContainedBy';
		public EnumRule getRule() { return rule; }
		
		//ContainedBy = 'containedBy' | NotContainedBy = 'notContainedBy'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContainedBy = 'containedBy'
		public EnumLiteralDeclaration getContainedByEnumLiteralDeclaration_0() { return cContainedByEnumLiteralDeclaration_0; }
		
		//'containedBy'
		public Keyword getContainedByContainedByKeyword_0_0() { return cContainedByContainedByKeyword_0_0; }
		
		//NotContainedBy = 'notContainedBy'
		public EnumLiteralDeclaration getNotContainedByEnumLiteralDeclaration_1() { return cNotContainedByEnumLiteralDeclaration_1; }
		
		//'notContainedBy'
		public Keyword getNotContainedByNotContainedByKeyword_1_0() { return cNotContainedByNotContainedByKeyword_1_0; }
	}
	
	private final DomainSpecificCoverageElements pDomainSpecificCoverage;
	private final EStringElements pEString;
	private final ContextElements pContext;
	private final RuleElements pRule;
	private final EBooleanElements pEBoolean;
	private final IgnoreElements pIgnore;
	private final ConditionalIgnoreElements pConditionalIgnore;
	private final CoverageOfReferencedElements pCoverageOfReferenced;
	private final CoverageByContentElements pCoverageByContent;
	private final BranchSpecificationElements pBranchSpecification;
	private final BranchElements pBranch;
	private final CoveredContentsElements eCoveredContents;
	private final ConditionTypeElements eConditionType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public COVGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainSpecificCoverage = new DomainSpecificCoverageElements();
		this.pEString = new EStringElements();
		this.pContext = new ContextElements();
		this.pRule = new RuleElements();
		this.pEBoolean = new EBooleanElements();
		this.pIgnore = new IgnoreElements();
		this.pConditionalIgnore = new ConditionalIgnoreElements();
		this.pCoverageOfReferenced = new CoverageOfReferencedElements();
		this.pCoverageByContent = new CoverageByContentElements();
		this.pBranchSpecification = new BranchSpecificationElements();
		this.pBranch = new BranchElements();
		this.eCoveredContents = new CoveredContentsElements();
		this.eConditionType = new ConditionTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("coverage.dsl.xtext.COV".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainSpecificCoverage returns DomainSpecificCoverage:
	//    'ruleset'
	//    name=EString
	//    '{'
	//        'import' 'metamodel' metamodel=[ecore::EPackage|EString]
	//        contexts+=Context ( "," contexts+=Context)*
	//    '}';
	public DomainSpecificCoverageElements getDomainSpecificCoverageAccess() {
		return pDomainSpecificCoverage;
	}
	
	public ParserRule getDomainSpecificCoverageRule() {
		return getDomainSpecificCoverageAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Context returns Context:
	//    'context' metaclass=[ecore::EClass|EString]
	//    '{'
	//        (rules+=Rule ( "," rules+=Rule)*)?
	//    '}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Rule returns Rule:
	//    Ignore | CoverageOfReferenced | CoverageByContent | ConditionalIgnore | BranchSpecification ;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Ignore returns Ignore:
	//    {Ignore}
	//    'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
	//        ('{' 'description' description=EString '}')?;
	public IgnoreElements getIgnoreAccess() {
		return pIgnore;
	}
	
	public ParserRule getIgnoreRule() {
		return getIgnoreAccess().getRule();
	}
	
	//ConditionalIgnore returns ConditionalIgnore:
	//    'ignoreif' condition=ConditionType
	//        containerType+=[ecore::EClass|EString] ( "," containerType+=[ecore::EClass|EString])*
	//        ('{' 'description' description=EString '}')?;
	public ConditionalIgnoreElements getConditionalIgnoreAccess() {
		return pConditionalIgnore;
	}
	
	public ParserRule getConditionalIgnoreRule() {
		return getConditionalIgnoreAccess().getRule();
	}
	
	//CoverageOfReferenced returns CoverageOfReferenced:
	//    'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
	//        ('{' 'description' description=EString '}')?;
	public CoverageOfReferencedElements getCoverageOfReferencedAccess() {
		return pCoverageOfReferenced;
	}
	
	public ParserRule getCoverageOfReferencedRule() {
		return getCoverageOfReferencedAccess().getRule();
	}
	
	//CoverageByContent returns CoverageByContent:
	//    'covered' 'when' multiplicity=CoveredContents
	//        containmentReference=[ecore::EReference|EString] 'iscovered'
	//        ('{' 'description' description=EString '}')?;
	public CoverageByContentElements getCoverageByContentAccess() {
		return pCoverageByContent;
	}
	
	public ParserRule getCoverageByContentRule() {
		return getCoverageByContentAccess().getRule();
	}
	
	//BranchSpecification returns BranchSpecification:
	//    'has' 'branches' '{'
	//        'description' description=EString
	//        'condition' condition=EString
	//        branches += Branch (',' branches += Branch)*
	//    '}';
	public BranchSpecificationElements getBranchSpecificationAccess() {
		return pBranchSpecification;
	}
	
	public ParserRule getBranchSpecificationRule() {
		return getBranchSpecificationAccess().getRule();
	}
	
	//Branch returns Branch:
	//    'queryBranch' query=EString;
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}
	
	//enum CoveredContents returns CoveredContents:
	//    ALL = 'ALL' | ONE = 'ONE';
	public CoveredContentsElements getCoveredContentsAccess() {
		return eCoveredContents;
	}
	
	public EnumRule getCoveredContentsRule() {
		return getCoveredContentsAccess().getRule();
	}
	
	//enum ConditionType returns ConditionType:
	//    ContainedBy = 'containedBy' | NotContainedBy = 'notContainedBy';
	public ConditionTypeElements getConditionTypeAccess() {
		return eConditionType;
	}
	
	public EnumRule getConditionTypeRule() {
		return getConditionTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
