/*
 * generated by Xtext 2.27.0
 */
package coverage.dsl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class COVGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DomainSpecificCoverageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.DomainSpecificCoverage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cImportKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMetamodelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetamodelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMetamodelEPackageCrossReference_5_0 = (CrossReference)cMetamodelAssignment_5.eContents().get(0);
		private final RuleCall cMetamodelEPackageEStringParserRuleCall_5_0_1 = (RuleCall)cMetamodelEPackageCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImportKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRulesetKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cImportsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_6_2_0 = (RuleCall)cImportsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cImportsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_6_3_1_0 = (RuleCall)cImportsAssignment_6_3_1.eContents().get(0);
		private final Assignment cContextsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContextsContextParserRuleCall_7_0 = (RuleCall)cContextsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cContextsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_8_1_0 = (RuleCall)cContextsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DomainSpecificCoverage returns DomainSpecificCoverage:
		//    'ruleset'
		//    name=EString
		//    '{'
		//        'import' 'metamodel' metamodel=[ecore::EPackage|EString]
		//        ('import' 'ruleset' imports+=Import ("," imports+=Import)*)?
		//        contexts+=Context ( "," contexts+=Context)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ruleset'
		//name=EString
		//'{'
		//    'import' 'metamodel' metamodel=[ecore::EPackage|EString]
		//    ('import' 'ruleset' imports+=Import ("," imports+=Import)*)?
		//    contexts+=Context ( "," contexts+=Context)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ruleset'
		public Keyword getRulesetKeyword_0() { return cRulesetKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'import'
		public Keyword getImportKeyword_3() { return cImportKeyword_3; }
		
		//'metamodel'
		public Keyword getMetamodelKeyword_4() { return cMetamodelKeyword_4; }
		
		//metamodel=[ecore::EPackage|EString]
		public Assignment getMetamodelAssignment_5() { return cMetamodelAssignment_5; }
		
		//[ecore::EPackage|EString]
		public CrossReference getMetamodelEPackageCrossReference_5_0() { return cMetamodelEPackageCrossReference_5_0; }
		
		//EString
		public RuleCall getMetamodelEPackageEStringParserRuleCall_5_0_1() { return cMetamodelEPackageEStringParserRuleCall_5_0_1; }
		
		//('import' 'ruleset' imports+=Import ("," imports+=Import)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'import'
		public Keyword getImportKeyword_6_0() { return cImportKeyword_6_0; }
		
		//'ruleset'
		public Keyword getRulesetKeyword_6_1() { return cRulesetKeyword_6_1; }
		
		//imports+=Import
		public Assignment getImportsAssignment_6_2() { return cImportsAssignment_6_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_6_2_0() { return cImportsImportParserRuleCall_6_2_0; }
		
		//("," imports+=Import)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_6_3_1() { return cImportsAssignment_6_3_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_6_3_1_0() { return cImportsImportParserRuleCall_6_3_1_0; }
		
		//contexts+=Context
		public Assignment getContextsAssignment_7() { return cContextsAssignment_7; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_7_0() { return cContextsContextParserRuleCall_7_0; }
		
		//( "," contexts+=Context)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//contexts+=Context
		public Assignment getContextsAssignment_8_1() { return cContextsAssignment_8_1; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_8_1_0() { return cContextsContextParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cImportAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cWithKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cImportedNamespaceImportedFQNParserRuleCall_0_1_1_0 = (RuleCall)cImportedNamespaceAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cFromKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cImportURIAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_0_1_2_1_0 = (RuleCall)cImportURIAssignment_0_1_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportURIAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_1_0 = (RuleCall)cImportURIAssignment_1_1.eContents().get(0);
		private final Assignment cImportedRulesetAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cImportedRulesetDomainSpecificCoverageCrossReference_2_0 = (CrossReference)cImportedRulesetAssignment_2.eContents().get(0);
		private final RuleCall cImportedRulesetDomainSpecificCoverageEStringParserRuleCall_2_0_1 = (RuleCall)cImportedRulesetDomainSpecificCoverageCrossReference_2_0.eContents().get(1);
		
		//Import returns Import:
		//    {Import}
		//    ('with' importedNamespace=ImportedFQN ('from' importURI=STRING)?) |
		//    ('from' importURI=STRING)|
		//    (importedRuleset=[DomainSpecificCoverage|EString])
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import}
		//('with' importedNamespace=ImportedFQN ('from' importURI=STRING)?) |
		//('from' importURI=STRING)|
		//(importedRuleset=[DomainSpecificCoverage|EString])
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Import}
		//('with' importedNamespace=ImportedFQN ('from' importURI=STRING)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{Import}
		public Action getImportAction_0_0() { return cImportAction_0_0; }
		
		//('with' importedNamespace=ImportedFQN ('from' importURI=STRING)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'with'
		public Keyword getWithKeyword_0_1_0() { return cWithKeyword_0_1_0; }
		
		//importedNamespace=ImportedFQN
		public Assignment getImportedNamespaceAssignment_0_1_1() { return cImportedNamespaceAssignment_0_1_1; }
		
		//ImportedFQN
		public RuleCall getImportedNamespaceImportedFQNParserRuleCall_0_1_1_0() { return cImportedNamespaceImportedFQNParserRuleCall_0_1_1_0; }
		
		//('from' importURI=STRING)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'from'
		public Keyword getFromKeyword_0_1_2_0() { return cFromKeyword_0_1_2_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_0_1_2_1() { return cImportURIAssignment_0_1_2_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_0_1_2_1_0() { return cImportURISTRINGTerminalRuleCall_0_1_2_1_0; }
		
		//('from' importURI=STRING)
		public Group getGroup_1() { return cGroup_1; }
		
		//'from'
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1_1() { return cImportURIAssignment_1_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_1_0() { return cImportURISTRINGTerminalRuleCall_1_1_0; }
		
		//(importedRuleset=[DomainSpecificCoverage|EString])
		public Assignment getImportedRulesetAssignment_2() { return cImportedRulesetAssignment_2; }
		
		//[DomainSpecificCoverage|EString]
		public CrossReference getImportedRulesetDomainSpecificCoverageCrossReference_2_0() { return cImportedRulesetDomainSpecificCoverageCrossReference_2_0; }
		
		//EString
		public RuleCall getImportedRulesetDomainSpecificCoverageEStringParserRuleCall_2_0_1() { return cImportedRulesetDomainSpecificCoverageEStringParserRuleCall_2_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName: ID ('::' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('::' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('::' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportedFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.ImportedFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ImportedFQN: QualifiedName ('::''*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ('::''*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('::''*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetaclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetaclassEClassCrossReference_1_0 = (CrossReference)cMetaclassAssignment_1.eContents().get(0);
		private final RuleCall cMetaclassEClassEStringParserRuleCall_1_0_1 = (RuleCall)cMetaclassEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_3_0_0 = (RuleCall)cRulesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRulesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_3_1_1_0 = (RuleCall)cRulesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Context returns Context:
		//    'context' metaclass=[ecore::EClass|EString]
		//    '{'
		//        (rules+=Rule ( "," rules+=Rule)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' metaclass=[ecore::EClass|EString]
		//'{'
		//    (rules+=Rule ( "," rules+=Rule)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//metaclass=[ecore::EClass|EString]
		public Assignment getMetaclassAssignment_1() { return cMetaclassAssignment_1; }
		
		//[ecore::EClass|EString]
		public CrossReference getMetaclassEClassCrossReference_1_0() { return cMetaclassEClassCrossReference_1_0; }
		
		//EString
		public RuleCall getMetaclassEClassEStringParserRuleCall_1_0_1() { return cMetaclassEClassEStringParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(rules+=Rule ( "," rules+=Rule)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_3_0() { return cRulesAssignment_3_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_0_0() { return cRulesRuleParserRuleCall_3_0_0; }
		
		//( "," rules+=Rule)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_3_1_1() { return cRulesAssignment_3_1_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_1_1_0() { return cRulesRuleParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIgnoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLimitedIgnoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCoverageOfReferencedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCoverageByContentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBranchSpecificationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Rule returns Rule:
		//    Ignore |
		//    LimitedIgnore |
		//    CoverageOfReferenced |
		//    CoverageByContent |
		//    BranchSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//Ignore |
		//LimitedIgnore |
		//CoverageOfReferenced |
		//CoverageByContent |
		//BranchSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ignore
		public RuleCall getIgnoreParserRuleCall_0() { return cIgnoreParserRuleCall_0; }
		
		//LimitedIgnore
		public RuleCall getLimitedIgnoreParserRuleCall_1() { return cLimitedIgnoreParserRuleCall_1; }
		
		//CoverageOfReferenced
		public RuleCall getCoverageOfReferencedParserRuleCall_2() { return cCoverageOfReferencedParserRuleCall_2; }
		
		//CoverageByContent
		public RuleCall getCoverageByContentParserRuleCall_3() { return cCoverageByContentParserRuleCall_3; }
		
		//BranchSpecification
		public RuleCall getBranchSpecificationParserRuleCall_4() { return cBranchSpecificationParserRuleCall_4; }
	}
	public class IgnoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Ignore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIgnoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cIgnoreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSubtypesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIgnoreSubtypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIgnoreSubtypesEBooleanParserRuleCall_4_1_0 = (RuleCall)cIgnoreSubtypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_6_1_0 = (RuleCall)cDescriptionAssignment_6_1.eContents().get(0);
		
		//Ignore returns Ignore:
		//    {Ignore}
		//    ('when' condition=Condition)?
		//    'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
		//    ('description' description=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Ignore}
		//('when' condition=Condition)?
		//'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
		//('description' description=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Ignore}
		public Action getIgnoreAction_0() { return cIgnoreAction_0; }
		
		//('when' condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//'ignore'
		public Keyword getIgnoreKeyword_2() { return cIgnoreKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//('subtypes' ignoreSubtypes=EBoolean)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'subtypes'
		public Keyword getSubtypesKeyword_4_0() { return cSubtypesKeyword_4_0; }
		
		//ignoreSubtypes=EBoolean
		public Assignment getIgnoreSubtypesAssignment_4_1() { return cIgnoreSubtypesAssignment_4_1; }
		
		//EBoolean
		public RuleCall getIgnoreSubtypesEBooleanParserRuleCall_4_1_0() { return cIgnoreSubtypesEBooleanParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('description' description=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'description'
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_6_1() { return cDescriptionAssignment_6_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_6_1_0() { return cDescriptionEStringParserRuleCall_6_1_0; }
	}
	public class LimitedIgnoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.LimitedIgnore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitedIgnoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cIgnoreifKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeLimitationTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cContainerMetaclassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cContainerMetaclassEClassCrossReference_4_0 = (CrossReference)cContainerMetaclassAssignment_4.eContents().get(0);
		private final RuleCall cContainerMetaclassEClassEStringParserRuleCall_4_0_1 = (RuleCall)cContainerMetaclassEClassCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContainerMetaclassAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cContainerMetaclassEClassCrossReference_5_1_0 = (CrossReference)cContainerMetaclassAssignment_5_1.eContents().get(0);
		private final RuleCall cContainerMetaclassEClassEStringParserRuleCall_5_1_0_1 = (RuleCall)cContainerMetaclassEClassCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_6_1_0 = (RuleCall)cDescriptionAssignment_6_1.eContents().get(0);
		
		//LimitedIgnore returns LimitedIgnore:
		//    {LimitedIgnore}
		//    ('when' condition=Condition)?
		//    'ignoreif' type=LimitationType
		//        containerMetaclass+=[ecore::EClass|EString] ( "," containerMetaclass+=[ecore::EClass|EString])*
		//    ('description' description=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{LimitedIgnore}
		//('when' condition=Condition)?
		//'ignoreif' type=LimitationType
		//    containerMetaclass+=[ecore::EClass|EString] ( "," containerMetaclass+=[ecore::EClass|EString])*
		//('description' description=EString)?
		public Group getGroup() { return cGroup; }
		
		//{LimitedIgnore}
		public Action getLimitedIgnoreAction_0() { return cLimitedIgnoreAction_0; }
		
		//('when' condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//'ignoreif'
		public Keyword getIgnoreifKeyword_2() { return cIgnoreifKeyword_2; }
		
		//type=LimitationType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//LimitationType
		public RuleCall getTypeLimitationTypeEnumRuleCall_3_0() { return cTypeLimitationTypeEnumRuleCall_3_0; }
		
		//containerMetaclass+=[ecore::EClass|EString]
		public Assignment getContainerMetaclassAssignment_4() { return cContainerMetaclassAssignment_4; }
		
		//[ecore::EClass|EString]
		public CrossReference getContainerMetaclassEClassCrossReference_4_0() { return cContainerMetaclassEClassCrossReference_4_0; }
		
		//EString
		public RuleCall getContainerMetaclassEClassEStringParserRuleCall_4_0_1() { return cContainerMetaclassEClassEStringParserRuleCall_4_0_1; }
		
		//( "," containerMetaclass+=[ecore::EClass|EString])*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//containerMetaclass+=[ecore::EClass|EString]
		public Assignment getContainerMetaclassAssignment_5_1() { return cContainerMetaclassAssignment_5_1; }
		
		//[ecore::EClass|EString]
		public CrossReference getContainerMetaclassEClassCrossReference_5_1_0() { return cContainerMetaclassEClassCrossReference_5_1_0; }
		
		//EString
		public RuleCall getContainerMetaclassEClassEStringParserRuleCall_5_1_0_1() { return cContainerMetaclassEClassEStringParserRuleCall_5_1_0_1; }
		
		//('description' description=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'description'
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_6_1() { return cDescriptionAssignment_6_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_6_1_0() { return cDescriptionEStringParserRuleCall_6_1_0; }
	}
	public class CoverageOfReferencedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.CoverageOfReferenced");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCoverageOfReferencedAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenceEReferenceCrossReference_3_0 = (CrossReference)cReferenceAssignment_3.eContents().get(0);
		private final RuleCall cReferenceEReferenceEStringParserRuleCall_3_0_1 = (RuleCall)cReferenceEReferenceCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cReferenceEReferenceCrossReference_4_1_0 = (CrossReference)cReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cReferenceEReferenceEStringParserRuleCall_4_1_0_1 = (RuleCall)cReferenceEReferenceCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		
		//CoverageOfReferenced returns CoverageOfReferenced:
		//    {CoverageOfReferenced}
		//    ('when' condition=Condition)?
		//    'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
		//    ('description' description=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CoverageOfReferenced}
		//('when' condition=Condition)?
		//'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
		//('description' description=EString)?
		public Group getGroup() { return cGroup; }
		
		//{CoverageOfReferenced}
		public Action getCoverageOfReferencedAction_0() { return cCoverageOfReferencedAction_0; }
		
		//('when' condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//'covers'
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }
		
		//reference+=[ecore::EReference|EString]
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }
		
		//[ecore::EReference|EString]
		public CrossReference getReferenceEReferenceCrossReference_3_0() { return cReferenceEReferenceCrossReference_3_0; }
		
		//EString
		public RuleCall getReferenceEReferenceEStringParserRuleCall_3_0_1() { return cReferenceEReferenceEStringParserRuleCall_3_0_1; }
		
		//("," reference+=[ecore::EReference|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//reference+=[ecore::EReference|EString]
		public Assignment getReferenceAssignment_4_1() { return cReferenceAssignment_4_1; }
		
		//[ecore::EReference|EString]
		public CrossReference getReferenceEReferenceCrossReference_4_1_0() { return cReferenceEReferenceCrossReference_4_1_0; }
		
		//EString
		public RuleCall getReferenceEReferenceEStringParserRuleCall_4_1_0_1() { return cReferenceEReferenceEStringParserRuleCall_4_1_0_1; }
		
		//('description' description=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'description'
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_5_1_0() { return cDescriptionEStringParserRuleCall_5_1_0; }
	}
	public class CoverageByContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.CoverageByContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCoverageByContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cCoveredKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityCoveredContentsEnumRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cContainmentReferenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cContainmentReferenceEReferenceCrossReference_5_0 = (CrossReference)cContainmentReferenceAssignment_5.eContents().get(0);
		private final RuleCall cContainmentReferenceEReferenceEStringParserRuleCall_5_0_1 = (RuleCall)cContainmentReferenceEReferenceCrossReference_5_0.eContents().get(1);
		private final Keyword cIscoveredKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDescriptionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_7_1_0 = (RuleCall)cDescriptionAssignment_7_1.eContents().get(0);
		
		//CoverageByContent returns CoverageByContent:
		//    {CoverageByContent}
		//    ('when' condition=Condition)?
		//    'covered' 'when' multiplicity=CoveredContents (containmentReference=[ecore::EReference|EString])? 'iscovered'
		//    ('description' description=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CoverageByContent}
		//('when' condition=Condition)?
		//'covered' 'when' multiplicity=CoveredContents (containmentReference=[ecore::EReference|EString])? 'iscovered'
		//('description' description=EString)?
		public Group getGroup() { return cGroup; }
		
		//{CoverageByContent}
		public Action getCoverageByContentAction_0() { return cCoverageByContentAction_0; }
		
		//('when' condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//'covered'
		public Keyword getCoveredKeyword_2() { return cCoveredKeyword_2; }
		
		//'when'
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }
		
		//multiplicity=CoveredContents
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//CoveredContents
		public RuleCall getMultiplicityCoveredContentsEnumRuleCall_4_0() { return cMultiplicityCoveredContentsEnumRuleCall_4_0; }
		
		//(containmentReference=[ecore::EReference|EString])?
		public Assignment getContainmentReferenceAssignment_5() { return cContainmentReferenceAssignment_5; }
		
		//[ecore::EReference|EString]
		public CrossReference getContainmentReferenceEReferenceCrossReference_5_0() { return cContainmentReferenceEReferenceCrossReference_5_0; }
		
		//EString
		public RuleCall getContainmentReferenceEReferenceEStringParserRuleCall_5_0_1() { return cContainmentReferenceEReferenceEStringParserRuleCall_5_0_1; }
		
		//'iscovered'
		public Keyword getIscoveredKeyword_6() { return cIscoveredKeyword_6; }
		
		//('description' description=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'description'
		public Keyword getDescriptionKeyword_7_0() { return cDescriptionKeyword_7_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_7_1() { return cDescriptionAssignment_7_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_7_1_0() { return cDescriptionEStringParserRuleCall_7_1_0; }
	}
	public class BranchSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.BranchSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBranchSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBranchesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBranchesBranchParserRuleCall_3_0 = (RuleCall)cBranchesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBranchesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBranchesBranchParserRuleCall_4_1_0 = (RuleCall)cBranchesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BranchSpecification returns BranchSpecification:
		//    {BranchSpecification}
		//    ('when' condition=Condition)?
		//    '{'
		//        branches += Branch (',' branches += Branch)*
		//        ('description' description=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BranchSpecification}
		//('when' condition=Condition)?
		//'{'
		//    branches += Branch (',' branches += Branch)*
		//    ('description' description=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{BranchSpecification}
		public Action getBranchSpecificationAction_0() { return cBranchSpecificationAction_0; }
		
		//('when' condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//branches += Branch
		public Assignment getBranchesAssignment_3() { return cBranchesAssignment_3; }
		
		//Branch
		public RuleCall getBranchesBranchParserRuleCall_3_0() { return cBranchesBranchParserRuleCall_3_0; }
		
		//(',' branches += Branch)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//branches += Branch
		public Assignment getBranchesAssignment_4_1() { return cBranchesAssignment_4_1; }
		
		//Branch
		public RuleCall getBranchesBranchParserRuleCall_4_1_0() { return cBranchesBranchParserRuleCall_4_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'description'
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_1_0() { return cDescriptionSTRINGTerminalRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Branch");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImplicitBranchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExplicitBranchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Branch returns Branch:
		//    ImplicitBranch | ExplicitBranch;
		@Override public ParserRule getRule() { return rule; }
		
		//ImplicitBranch | ExplicitBranch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ImplicitBranch
		public RuleCall getImplicitBranchParserRuleCall_0() { return cImplicitBranchParserRuleCall_0; }
		
		//ExplicitBranch
		public RuleCall getExplicitBranchParserRuleCall_1() { return cExplicitBranchParserRuleCall_1; }
	}
	public class ExplicitBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.ExplicitBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBranchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOCLQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOCLQuerySTRINGTerminalRuleCall_1_0 = (RuleCall)cOCLQueryAssignment_1.eContents().get(0);
		
		//ExplicitBranch returns ExplicitBranch:
		//    'branch' OCLQuery=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'branch' OCLQuery=STRING
		public Group getGroup() { return cGroup; }
		
		//'branch'
		public Keyword getBranchKeyword_0() { return cBranchKeyword_0; }
		
		//OCLQuery=STRING
		public Assignment getOCLQueryAssignment_1() { return cOCLQueryAssignment_1; }
		
		//STRING
		public RuleCall getOCLQuerySTRINGTerminalRuleCall_1_0() { return cOCLQuerySTRINGTerminalRuleCall_1_0; }
	}
	public class ImplicitBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.ImplicitBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplicitBranchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBranchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImplicitBranch returns ImplicitBranch:
		//    {ImplicitBranch}
		//    'branch' 'else'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ImplicitBranch}
		//'branch' 'else'
		public Group getGroup() { return cGroup; }
		
		//{ImplicitBranch}
		public Action getImplicitBranchAction_0() { return cImplicitBranchAction_0; }
		
		//'branch'
		public Keyword getBranchKeyword_1() { return cBranchKeyword_1; }
		
		//'else'
		public Keyword getElseKeyword_2() { return cElseKeyword_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.Condition");
		private final Assignment cOCLConstraintAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOCLConstraintSTRINGTerminalRuleCall_0 = (RuleCall)cOCLConstraintAssignment.eContents().get(0);
		
		//Condition returns Condition:
		//    OCLConstraint=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//OCLConstraint=STRING
		public Assignment getOCLConstraintAssignment() { return cOCLConstraintAssignment; }
		
		//STRING
		public RuleCall getOCLConstraintSTRINGTerminalRuleCall_0() { return cOCLConstraintSTRINGTerminalRuleCall_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class CoveredContentsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.CoveredContents");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLALLKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONEONEKeyword_1_0 = (Keyword)cONEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANYAnyContentKeyword_2_0 = (Keyword)cANYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CoveredContents returns CoveredContents:
		//    ALL = 'ALL' | ONE = 'ONE' | ANY = 'anyContent';
		public EnumRule getRule() { return rule; }
		
		//ALL = 'ALL' | ONE = 'ONE' | ANY = 'anyContent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALL = 'ALL'
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }
		
		//'ALL'
		public Keyword getALLALLKeyword_0_0() { return cALLALLKeyword_0_0; }
		
		//ONE = 'ONE'
		public EnumLiteralDeclaration getONEEnumLiteralDeclaration_1() { return cONEEnumLiteralDeclaration_1; }
		
		//'ONE'
		public Keyword getONEONEKeyword_1_0() { return cONEONEKeyword_1_0; }
		
		//ANY = 'anyContent'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_2() { return cANYEnumLiteralDeclaration_2; }
		
		//'anyContent'
		public Keyword getANYAnyContentKeyword_2_0() { return cANYAnyContentKeyword_2_0; }
	}
	public class LimitationTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "coverage.dsl.xtext.COV.LimitationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContainedByEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContainedByContainedByKeyword_0_0 = (Keyword)cContainedByEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotContainedByEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotContainedByNotContainedByKeyword_1_0 = (Keyword)cNotContainedByEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LimitationType returns LimitationType:
		//    containedBy = 'containedBy' | notContainedBy = 'notContainedBy';
		public EnumRule getRule() { return rule; }
		
		//containedBy = 'containedBy' | notContainedBy = 'notContainedBy'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//containedBy = 'containedBy'
		public EnumLiteralDeclaration getContainedByEnumLiteralDeclaration_0() { return cContainedByEnumLiteralDeclaration_0; }
		
		//'containedBy'
		public Keyword getContainedByContainedByKeyword_0_0() { return cContainedByContainedByKeyword_0_0; }
		
		//notContainedBy = 'notContainedBy'
		public EnumLiteralDeclaration getNotContainedByEnumLiteralDeclaration_1() { return cNotContainedByEnumLiteralDeclaration_1; }
		
		//'notContainedBy'
		public Keyword getNotContainedByNotContainedByKeyword_1_0() { return cNotContainedByNotContainedByKeyword_1_0; }
	}
	
	private final DomainSpecificCoverageElements pDomainSpecificCoverage;
	private final ImportElements pImport;
	private final QualifiedNameElements pQualifiedName;
	private final ImportedFQNElements pImportedFQN;
	private final EStringElements pEString;
	private final ContextElements pContext;
	private final RuleElements pRule;
	private final IgnoreElements pIgnore;
	private final LimitedIgnoreElements pLimitedIgnore;
	private final CoverageOfReferencedElements pCoverageOfReferenced;
	private final CoverageByContentElements pCoverageByContent;
	private final BranchSpecificationElements pBranchSpecification;
	private final BranchElements pBranch;
	private final ExplicitBranchElements pExplicitBranch;
	private final ImplicitBranchElements pImplicitBranch;
	private final ConditionElements pCondition;
	private final CoveredContentsElements eCoveredContents;
	private final LimitationTypeElements eLimitationType;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public COVGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainSpecificCoverage = new DomainSpecificCoverageElements();
		this.pImport = new ImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImportedFQN = new ImportedFQNElements();
		this.pEString = new EStringElements();
		this.pContext = new ContextElements();
		this.pRule = new RuleElements();
		this.pIgnore = new IgnoreElements();
		this.pLimitedIgnore = new LimitedIgnoreElements();
		this.pCoverageOfReferenced = new CoverageOfReferencedElements();
		this.pCoverageByContent = new CoverageByContentElements();
		this.pBranchSpecification = new BranchSpecificationElements();
		this.pBranch = new BranchElements();
		this.pExplicitBranch = new ExplicitBranchElements();
		this.pImplicitBranch = new ImplicitBranchElements();
		this.pCondition = new ConditionElements();
		this.eCoveredContents = new CoveredContentsElements();
		this.eLimitationType = new LimitationTypeElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("coverage.dsl.xtext.COV".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainSpecificCoverage returns DomainSpecificCoverage:
	//    'ruleset'
	//    name=EString
	//    '{'
	//        'import' 'metamodel' metamodel=[ecore::EPackage|EString]
	//        ('import' 'ruleset' imports+=Import ("," imports+=Import)*)?
	//        contexts+=Context ( "," contexts+=Context)*
	//    '}';
	public DomainSpecificCoverageElements getDomainSpecificCoverageAccess() {
		return pDomainSpecificCoverage;
	}
	
	public ParserRule getDomainSpecificCoverageRule() {
		return getDomainSpecificCoverageAccess().getRule();
	}
	
	//Import returns Import:
	//    {Import}
	//    ('with' importedNamespace=ImportedFQN ('from' importURI=STRING)?) |
	//    ('from' importURI=STRING)|
	//    (importedRuleset=[DomainSpecificCoverage|EString])
	//    ;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedName: ID ('::' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ImportedFQN: QualifiedName ('::''*')?;
	public ImportedFQNElements getImportedFQNAccess() {
		return pImportedFQN;
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Context returns Context:
	//    'context' metaclass=[ecore::EClass|EString]
	//    '{'
	//        (rules+=Rule ( "," rules+=Rule)*)?
	//    '}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Rule returns Rule:
	//    Ignore |
	//    LimitedIgnore |
	//    CoverageOfReferenced |
	//    CoverageByContent |
	//    BranchSpecification;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Ignore returns Ignore:
	//    {Ignore}
	//    ('when' condition=Condition)?
	//    'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
	//    ('description' description=EString)?;
	public IgnoreElements getIgnoreAccess() {
		return pIgnore;
	}
	
	public ParserRule getIgnoreRule() {
		return getIgnoreAccess().getRule();
	}
	
	//LimitedIgnore returns LimitedIgnore:
	//    {LimitedIgnore}
	//    ('when' condition=Condition)?
	//    'ignoreif' type=LimitationType
	//        containerMetaclass+=[ecore::EClass|EString] ( "," containerMetaclass+=[ecore::EClass|EString])*
	//    ('description' description=EString)?;
	public LimitedIgnoreElements getLimitedIgnoreAccess() {
		return pLimitedIgnore;
	}
	
	public ParserRule getLimitedIgnoreRule() {
		return getLimitedIgnoreAccess().getRule();
	}
	
	//CoverageOfReferenced returns CoverageOfReferenced:
	//    {CoverageOfReferenced}
	//    ('when' condition=Condition)?
	//    'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
	//    ('description' description=EString)?;
	public CoverageOfReferencedElements getCoverageOfReferencedAccess() {
		return pCoverageOfReferenced;
	}
	
	public ParserRule getCoverageOfReferencedRule() {
		return getCoverageOfReferencedAccess().getRule();
	}
	
	//CoverageByContent returns CoverageByContent:
	//    {CoverageByContent}
	//    ('when' condition=Condition)?
	//    'covered' 'when' multiplicity=CoveredContents (containmentReference=[ecore::EReference|EString])? 'iscovered'
	//    ('description' description=EString)?;
	public CoverageByContentElements getCoverageByContentAccess() {
		return pCoverageByContent;
	}
	
	public ParserRule getCoverageByContentRule() {
		return getCoverageByContentAccess().getRule();
	}
	
	//BranchSpecification returns BranchSpecification:
	//    {BranchSpecification}
	//    ('when' condition=Condition)?
	//    '{'
	//        branches += Branch (',' branches += Branch)*
	//        ('description' description=STRING)?
	//    '}';
	public BranchSpecificationElements getBranchSpecificationAccess() {
		return pBranchSpecification;
	}
	
	public ParserRule getBranchSpecificationRule() {
		return getBranchSpecificationAccess().getRule();
	}
	
	//Branch returns Branch:
	//    ImplicitBranch | ExplicitBranch;
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}
	
	//ExplicitBranch returns ExplicitBranch:
	//    'branch' OCLQuery=STRING;
	public ExplicitBranchElements getExplicitBranchAccess() {
		return pExplicitBranch;
	}
	
	public ParserRule getExplicitBranchRule() {
		return getExplicitBranchAccess().getRule();
	}
	
	//ImplicitBranch returns ImplicitBranch:
	//    {ImplicitBranch}
	//    'branch' 'else'
	//    ;
	public ImplicitBranchElements getImplicitBranchAccess() {
		return pImplicitBranch;
	}
	
	public ParserRule getImplicitBranchRule() {
		return getImplicitBranchAccess().getRule();
	}
	
	//Condition returns Condition:
	//    OCLConstraint=STRING;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//enum CoveredContents returns CoveredContents:
	//    ALL = 'ALL' | ONE = 'ONE' | ANY = 'anyContent';
	public CoveredContentsElements getCoveredContentsAccess() {
		return eCoveredContents;
	}
	
	public EnumRule getCoveredContentsRule() {
		return getCoveredContentsAccess().getRule();
	}
	
	//enum LimitationType returns LimitationType:
	//    containedBy = 'containedBy' | notContainedBy = 'notContainedBy';
	public LimitationTypeElements getLimitationTypeAccess() {
		return eLimitationType;
	}
	
	public EnumRule getLimitationTypeRule() {
		return getLimitationTypeAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
