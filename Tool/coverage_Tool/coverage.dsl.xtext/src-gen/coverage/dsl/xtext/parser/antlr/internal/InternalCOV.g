/*
 * generated by Xtext 2.28.0
 */
grammar InternalCOV;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package coverage.dsl.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package coverage.dsl.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import coverage.dsl.xtext.services.COVGrammarAccess;

}

@parser::members {

 	private COVGrammarAccess grammarAccess;

    public InternalCOVParser(TokenStream input, COVGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainSpecificCoverage";
   	}

   	@Override
   	protected COVGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainSpecificCoverage
entryRuleDomainSpecificCoverage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainSpecificCoverageRule()); }
	iv_ruleDomainSpecificCoverage=ruleDomainSpecificCoverage
	{ $current=$iv_ruleDomainSpecificCoverage.current; }
	EOF;

// Rule DomainSpecificCoverage
ruleDomainSpecificCoverage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ruleset'
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainSpecificCoverageAccess().getRulesetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainSpecificCoverageAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainSpecificCoverageRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"coverage.dsl.xtext.COV.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDomainSpecificCoverageAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='import'
		{
			newLeafNode(otherlv_3, grammarAccess.getDomainSpecificCoverageAccess().getImportKeyword_3());
		}
		otherlv_4='metamodel'
		{
			newLeafNode(otherlv_4, grammarAccess.getDomainSpecificCoverageAccess().getMetamodelKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainSpecificCoverageRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDomainSpecificCoverageAccess().getMetamodelEPackageCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainSpecificCoverageAccess().getCoverageMetricsCoverageMetricParserRuleCall_6_0());
				}
				lv_coverageMetrics_6_0=ruleCoverageMetric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainSpecificCoverageRule());
					}
					add(
						$current,
						"coverageMetrics",
						lv_coverageMetrics_6_0,
						"coverage.dsl.xtext.COV.CoverageMetric");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getDomainSpecificCoverageAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainSpecificCoverageAccess().getCoverageMetricsCoverageMetricParserRuleCall_7_1_0());
					}
					lv_coverageMetrics_8_0=ruleCoverageMetric
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainSpecificCoverageRule());
						}
						add(
							$current,
							"coverageMetrics",
							lv_coverageMetrics_8_0,
							"coverage.dsl.xtext.COV.CoverageMetric");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getDomainSpecificCoverageAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleCoverageMetric
entryRuleCoverageMetric returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoverageMetricRule()); }
	iv_ruleCoverageMetric=ruleCoverageMetric
	{ $current=$iv_ruleCoverageMetric.current; }
	EOF;

// Rule CoverageMetric
ruleCoverageMetric returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCoverageMetricAccess().getModelElementCoverageParserRuleCall_0());
		}
		this_ModelElementCoverage_0=ruleModelElementCoverage
		{
			$current = $this_ModelElementCoverage_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCoverageMetricAccess().getBranchCoverageParserRuleCall_1());
		}
		this_BranchCoverage_1=ruleBranchCoverage
		{
			$current = $this_BranchCoverage_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModelElementCoverage
entryRuleModelElementCoverage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelElementCoverageRule()); }
	iv_ruleModelElementCoverage=ruleModelElementCoverage
	{ $current=$iv_ruleModelElementCoverage.current; }
	EOF;

// Rule ModelElementCoverage
ruleModelElementCoverage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ModelElementCoverageRuleset'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelElementCoverageAccess().getModelElementCoverageRulesetKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelElementCoverageAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelElementCoverageAccess().getContextsContextParserRuleCall_2_0());
				}
				lv_contexts_2_0=ruleContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelElementCoverageRule());
					}
					add(
						$current,
						"contexts",
						lv_contexts_2_0,
						"coverage.dsl.xtext.COV.Context");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getModelElementCoverageAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelElementCoverageAccess().getContextsContextParserRuleCall_3_1_0());
					}
					lv_contexts_4_0=ruleContext
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelElementCoverageRule());
						}
						add(
							$current,
							"contexts",
							lv_contexts_4_0,
							"coverage.dsl.xtext.COV.Context");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getModelElementCoverageAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBranchCoverage
entryRuleBranchCoverage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBranchCoverageRule()); }
	iv_ruleBranchCoverage=ruleBranchCoverage
	{ $current=$iv_ruleBranchCoverage.current; }
	EOF;

// Rule BranchCoverage
ruleBranchCoverage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BranchCoverageRuleset'
		{
			newLeafNode(otherlv_0, grammarAccess.getBranchCoverageAccess().getBranchCoverageRulesetKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBranchCoverageAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchCoverageAccess().getContextsContextParserRuleCall_2_0_0());
					}
					lv_contexts_2_0=ruleContext
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchCoverageRule());
						}
						add(
							$current,
							"contexts",
							lv_contexts_2_0,
							"coverage.dsl.xtext.COV.Context");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getBranchCoverageAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBranchCoverageAccess().getContextsContextParserRuleCall_2_1_1_0());
						}
						lv_contexts_4_0=ruleContext
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBranchCoverageRule());
							}
							add(
								$current,
								"contexts",
								lv_contexts_4_0,
								"coverage.dsl.xtext.COV.Context");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBranchCoverageAccess().getBranchSpecificationsBranchSpecificationParserRuleCall_3_0());
				}
				lv_branchSpecifications_5_0=ruleBranchSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBranchCoverageRule());
					}
					add(
						$current,
						"branchSpecifications",
						lv_branchSpecifications_5_0,
						"coverage.dsl.xtext.COV.BranchSpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getBranchCoverageAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchCoverageAccess().getBranchSpecificationsBranchSpecificationParserRuleCall_4_1_0());
					}
					lv_branchSpecifications_7_0=ruleBranchSpecification
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchCoverageRule());
						}
						add(
							$current,
							"branchSpecifications",
							lv_branchSpecifications_7_0,
							"coverage.dsl.xtext.COV.BranchSpecification");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getBranchCoverageAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	iv_ruleContext=ruleContext
	{ $current=$iv_ruleContext.current; }
	EOF;

// Rule Context
ruleContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getContextAccess().getContextKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContextRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getContextAccess().getMetaclassEClassCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getContextAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContextAccess().getRulesRuleParserRuleCall_3_0_0());
					}
					lv_rules_3_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContextRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"coverage.dsl.xtext.COV.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getContextAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getContextAccess().getRulesRuleParserRuleCall_3_1_1_0());
						}
						lv_rules_5_0=ruleRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getContextRule());
							}
							add(
								$current,
								"rules",
								lv_rules_5_0,
								"coverage.dsl.xtext.COV.Rule");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getContextAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleAccess().getIgnoreParserRuleCall_0());
		}
		this_Ignore_0=ruleIgnore
		{
			$current = $this_Ignore_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getCoverageOfReferencedParserRuleCall_1());
		}
		this_CoverageOfReferenced_1=ruleCoverageOfReferenced
		{
			$current = $this_CoverageOfReferenced_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getCoverageByContentParserRuleCall_2());
		}
		this_CoverageByContent_2=ruleCoverageByContent
		{
			$current = $this_CoverageByContent_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getLimitedIgnoreParserRuleCall_3());
		}
		this_LimitedIgnore_3=ruleLimitedIgnore
		{
			$current = $this_LimitedIgnore_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleIgnore
entryRuleIgnore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIgnoreRule()); }
	iv_ruleIgnore=ruleIgnore
	{ $current=$iv_ruleIgnore.current; }
	EOF;

// Rule Ignore
ruleIgnore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIgnoreAccess().getIgnoreAction_0(),
					$current);
			}
		)
		otherlv_1='ignore'
		{
			newLeafNode(otherlv_1, grammarAccess.getIgnoreAccess().getIgnoreKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIgnoreAccess().getLeftParenthesisKeyword_2());
		}
		(
			otherlv_3='subtypes'
			{
				newLeafNode(otherlv_3, grammarAccess.getIgnoreAccess().getSubtypesKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIgnoreAccess().getIgnoreSubtypesEBooleanParserRuleCall_3_1_0());
					}
					lv_ignoreSubtypes_4_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIgnoreRule());
						}
						set(
							$current,
							"ignoreSubtypes",
							lv_ignoreSubtypes_4_0,
							"coverage.dsl.xtext.COV.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getIgnoreAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_6='description'
			{
				newLeafNode(otherlv_6, grammarAccess.getIgnoreAccess().getDescriptionKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIgnoreAccess().getDescriptionEStringParserRuleCall_5_1_0());
					}
					lv_description_7_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIgnoreRule());
						}
						set(
							$current,
							"description",
							lv_description_7_0,
							"coverage.dsl.xtext.COV.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='condition'
			{
				newLeafNode(otherlv_8, grammarAccess.getIgnoreAccess().getConditionKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIgnoreAccess().getConditionConditionParserRuleCall_6_1_0());
					}
					lv_condition_9_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIgnoreRule());
						}
						set(
							$current,
							"condition",
							lv_condition_9_0,
							"coverage.dsl.xtext.COV.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLimitedIgnore
entryRuleLimitedIgnore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLimitedIgnoreRule()); }
	iv_ruleLimitedIgnore=ruleLimitedIgnore
	{ $current=$iv_ruleLimitedIgnore.current; }
	EOF;

// Rule LimitedIgnore
ruleLimitedIgnore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ignoreif'
		{
			newLeafNode(otherlv_0, grammarAccess.getLimitedIgnoreAccess().getIgnoreifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLimitedIgnoreAccess().getTypeLimitationTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleLimitationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLimitedIgnoreRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"coverage.dsl.xtext.COV.LimitationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLimitedIgnoreRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLimitedIgnoreAccess().getContainerMetaclassEClassCrossReference_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getLimitedIgnoreAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLimitedIgnoreRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getLimitedIgnoreAccess().getContainerMetaclassEClassCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_5='description'
			{
				newLeafNode(otherlv_5, grammarAccess.getLimitedIgnoreAccess().getDescriptionKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitedIgnoreAccess().getDescriptionEStringParserRuleCall_4_1_0());
					}
					lv_description_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitedIgnoreRule());
						}
						set(
							$current,
							"description",
							lv_description_6_0,
							"coverage.dsl.xtext.COV.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='condition'
			{
				newLeafNode(otherlv_7, grammarAccess.getLimitedIgnoreAccess().getConditionKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitedIgnoreAccess().getConditionConditionParserRuleCall_5_1_0());
					}
					lv_condition_8_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitedIgnoreRule());
						}
						set(
							$current,
							"condition",
							lv_condition_8_0,
							"coverage.dsl.xtext.COV.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCoverageOfReferenced
entryRuleCoverageOfReferenced returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoverageOfReferencedRule()); }
	iv_ruleCoverageOfReferenced=ruleCoverageOfReferenced
	{ $current=$iv_ruleCoverageOfReferenced.current; }
	EOF;

// Rule CoverageOfReferenced
ruleCoverageOfReferenced returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='covers'
		{
			newLeafNode(otherlv_0, grammarAccess.getCoverageOfReferencedAccess().getCoversKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCoverageOfReferencedRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getCoverageOfReferencedAccess().getReferenceEReferenceCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getCoverageOfReferencedAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCoverageOfReferencedRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getCoverageOfReferencedAccess().getReferenceEReferenceCrossReference_2_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='description'
			{
				newLeafNode(otherlv_4, grammarAccess.getCoverageOfReferencedAccess().getDescriptionKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCoverageOfReferencedAccess().getDescriptionEStringParserRuleCall_3_1_0());
					}
					lv_description_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCoverageOfReferencedRule());
						}
						set(
							$current,
							"description",
							lv_description_5_0,
							"coverage.dsl.xtext.COV.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='condition'
			{
				newLeafNode(otherlv_6, grammarAccess.getCoverageOfReferencedAccess().getConditionKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCoverageOfReferencedAccess().getConditionConditionParserRuleCall_4_1_0());
					}
					lv_condition_7_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCoverageOfReferencedRule());
						}
						set(
							$current,
							"condition",
							lv_condition_7_0,
							"coverage.dsl.xtext.COV.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCoverageByContent
entryRuleCoverageByContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoverageByContentRule()); }
	iv_ruleCoverageByContent=ruleCoverageByContent
	{ $current=$iv_ruleCoverageByContent.current; }
	EOF;

// Rule CoverageByContent
ruleCoverageByContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='covered'
		{
			newLeafNode(otherlv_0, grammarAccess.getCoverageByContentAccess().getCoveredKeyword_0());
		}
		otherlv_1='when'
		{
			newLeafNode(otherlv_1, grammarAccess.getCoverageByContentAccess().getWhenKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCoverageByContentAccess().getMultiplicityCoveredContentsEnumRuleCall_2_0());
				}
				lv_multiplicity_2_0=ruleCoveredContents
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoverageByContentRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_2_0,
						"coverage.dsl.xtext.COV.CoveredContents");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCoverageByContentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getCoverageByContentAccess().getContainmentReferenceEReferenceCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='iscovered'
		{
			newLeafNode(otherlv_4, grammarAccess.getCoverageByContentAccess().getIscoveredKeyword_4());
		}
		(
			otherlv_5='description'
			{
				newLeafNode(otherlv_5, grammarAccess.getCoverageByContentAccess().getDescriptionKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCoverageByContentAccess().getDescriptionEStringParserRuleCall_5_1_0());
					}
					lv_description_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCoverageByContentRule());
						}
						set(
							$current,
							"description",
							lv_description_6_0,
							"coverage.dsl.xtext.COV.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='condition'
			{
				newLeafNode(otherlv_7, grammarAccess.getCoverageByContentAccess().getConditionKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCoverageByContentAccess().getConditionConditionParserRuleCall_6_1_0());
					}
					lv_condition_8_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCoverageByContentRule());
						}
						set(
							$current,
							"condition",
							lv_condition_8_0,
							"coverage.dsl.xtext.COV.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBranchSpecification
entryRuleBranchSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBranchSpecificationRule()); }
	iv_ruleBranchSpecification=ruleBranchSpecification
	{ $current=$iv_ruleBranchSpecification.current; }
	EOF;

// Rule BranchSpecification
ruleBranchSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBranchSpecificationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBranchSpecificationAccess().getContextEClassCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='has'
		{
			newLeafNode(otherlv_1, grammarAccess.getBranchSpecificationAccess().getHasKeyword_1());
		}
		otherlv_2='branches'
		{
			newLeafNode(otherlv_2, grammarAccess.getBranchSpecificationAccess().getBranchesKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getBranchSpecificationAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='description'
			{
				newLeafNode(otherlv_4, grammarAccess.getBranchSpecificationAccess().getDescriptionKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchSpecificationAccess().getDescriptionEStringParserRuleCall_4_1_0());
					}
					lv_description_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchSpecificationRule());
						}
						set(
							$current,
							"description",
							lv_description_5_0,
							"coverage.dsl.xtext.COV.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='condition'
			{
				newLeafNode(otherlv_6, grammarAccess.getBranchSpecificationAccess().getConditionKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchSpecificationAccess().getConditionConditionParserRuleCall_5_1_0());
					}
					lv_condition_7_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchSpecificationRule());
						}
						set(
							$current,
							"condition",
							lv_condition_7_0,
							"coverage.dsl.xtext.COV.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBranchSpecificationAccess().getBranchesBranchParserRuleCall_6_0());
				}
				lv_branches_8_0=ruleBranch
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBranchSpecificationRule());
					}
					add(
						$current,
						"branches",
						lv_branches_8_0,
						"coverage.dsl.xtext.COV.Branch");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9=','
			{
				newLeafNode(otherlv_9, grammarAccess.getBranchSpecificationAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBranchSpecificationAccess().getBranchesBranchParserRuleCall_7_1_0());
					}
					lv_branches_10_0=ruleBranch
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBranchSpecificationRule());
						}
						add(
							$current,
							"branches",
							lv_branches_10_0,
							"coverage.dsl.xtext.COV.Branch");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getBranchSpecificationAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleBranch
entryRuleBranch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBranchRule()); }
	iv_ruleBranch=ruleBranch
	{ $current=$iv_ruleBranch.current; }
	EOF;

// Rule Branch
ruleBranch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='queryBranch'
		{
			newLeafNode(otherlv_0, grammarAccess.getBranchAccess().getQueryBranchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBranchAccess().getOCLQueryEStringParserRuleCall_1_0());
				}
				lv_OCLQuery_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBranchRule());
					}
					set(
						$current,
						"OCLQuery",
						lv_OCLQuery_1_0,
						"coverage.dsl.xtext.COV.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConditionAccess().getOCLConstraintEStringParserRuleCall_0());
			}
			lv_OCLConstraint_0_0=ruleEString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConditionRule());
				}
				set(
					$current,
					"OCLConstraint",
					lv_OCLConstraint_0_0,
					"coverage.dsl.xtext.COV.EString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Rule CoveredContents
ruleCoveredContents returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ALL'
			{
				$current = grammarAccess.getCoveredContentsAccess().getALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCoveredContentsAccess().getALLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ONE'
			{
				$current = grammarAccess.getCoveredContentsAccess().getONEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCoveredContentsAccess().getONEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule LimitationType
ruleLimitationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='containedBy'
			{
				$current = grammarAccess.getLimitationTypeAccess().getContainedByEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLimitationTypeAccess().getContainedByEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='notContainedBy'
			{
				$current = grammarAccess.getLimitationTypeAccess().getNotContainedByEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLimitationTypeAccess().getNotContainedByEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
