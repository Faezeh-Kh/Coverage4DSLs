// automatically generated by Xtext
grammar coverage.dsl.xtext.COV with org.eclipse.xtext.common.Terminals

import "https://coverage/DSLSpecificCoverage" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainSpecificCoverage returns DomainSpecificCoverage:
	'ruleset'
	name=EString
	'{'
		'import' 'metamodel' metamodel=[ecore::EPackage|EString]
		('import' 'ruleset' imports+=[DomainSpecificCoverage|EString] ("," imports+=[DomainSpecificCoverage|EString])*)?
		contexts+=Context ( "," contexts+=Context)*
	'}';
	 
EString returns ecore::EString:
	STRING | ID;

Context returns Context:
	'context' metaclass=[ecore::EClass|EString]
	'{'
		(rules+=Rule ( "," rules+=Rule)*)?
	'}';

Rule returns Rule:
	Ignore | LimitedIgnore | CoverageOfReferenced | CoverageByContent | BranchSpecification;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Ignore returns Rule:
	{Ignore} 
	('when' condition=Condition)?
	'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')'
	('description' description=EString)?;
	
LimitedIgnore returns Rule:
	{LimitedIgnore}
	('when' condition=Condition)?
	'ignoreif' type=LimitationType
		containerMetaclass+=[ecore::EClass|EString] ( "," containerMetaclass+=[ecore::EClass|EString])*
	('description' description=EString)?;
	
CoverageOfReferenced returns Rule:
	{CoverageOfReferenced}
	('when' condition=Condition)?
	'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*
	('description' description=EString)?;
	
CoverageByContent returns Rule:
	{CoverageByContent}
	('when' condition=Condition)?
	'covered' 'when' multiplicity=CoveredContents containmentReference=[ecore::EReference|EString] 'iscovered'
	('description' description=EString)?;
		

BranchSpecification returns Rule:
	{BranchSpecification}
	('when' condition=Condition)?
	'{' 
		branches += Branch (',' branches += Branch)* 
		('description' description=EString)?
	'}';

Branch returns Branch:
	ExplicitBranch| ImplicitBranch;

ExplicitBranch returns ExplicitBranch: 
	'branch' OCLQuery=EString;

ImplicitBranch returns ImplicitBranch: 
	{ImplicitBranch} 'branch' 'else';

Condition returns Condition:
	OCLConstraint=EString;
	
enum CoveredContents returns CoveredContents:
	ALL = 'ALL' | ONE = 'ONE';

enum LimitationType returns LimitationType:
	containedBy = 'containedBy' | notContainedBy = 'notContainedBy';
