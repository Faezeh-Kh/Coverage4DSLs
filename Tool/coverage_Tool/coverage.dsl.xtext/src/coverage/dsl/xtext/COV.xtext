// automatically generated by Xtext
grammar coverage.dsl.xtext.COV with org.eclipse.xtext.common.Terminals

import "https://coverage/DSLSpecificCoverage" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainSpecificCoverage returns DomainSpecificCoverage:
	'ruleset'
	name=EString
	'{'
		'import' 'metamodel' metamodel=[ecore::EPackage|EString]
		contexts+=Context ( "," contexts+=Context)* 
	'}';

EString returns ecore::EString:
	STRING | ID;

Context returns Context:
	'context' metaclass=[ecore::EClass|EString]
	'{'
		(rules+=Rule ( "," rules+=Rule)*)?
	'}';

Rule returns Rule:
	Ignore | CoverageOfReferenced | CoverageByContent | ConditionalIgnore | BranchSpecification ;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Ignore returns Ignore:
	{Ignore} 'ignore' '(' ('subtypes' ignoreSubtypes=EBoolean)? ')';
	
ConditionalIgnore returns ConditionalIgnore:
	'ignoreif' condition=ConditionType
		containerType+=[ecore::EClass|EString] ( "," containerType+=[ecore::EClass|EString])* 
	;
	
CoverageOfReferenced returns CoverageOfReferenced:
	'covers' reference+=[ecore::EReference|EString] ("," reference+=[ecore::EReference|EString])*;

CoverageByContent returns CoverageByContent:
	'covered' 'when' multiplicity=CoveredContents 
		containmentReference=[ecore::EReference|EString] 'iscovered';

BranchSpecification returns BranchSpecification:
	'has' 'branches' '{' branches += Branch (',' branches += Branch)* '}';

Branch returns Branch:
	'queryBranch' query=EString
;
	
enum CoveredContents returns CoveredContents:
	ALL = 'ALL' | ONE = 'ONE';

enum ConditionType returns ConditionType:
	ContainedBy = 'containedBy' | NotContainedBy = 'notContainedBy';
