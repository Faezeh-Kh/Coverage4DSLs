/*
 * generated by Xtext 2.28.0
 */
package coverage.dsl.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import coverage.dsl.xtext.ide.contentassist.antlr.internal.InternalCOVParser;
import coverage.dsl.xtext.services.COVGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class COVParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(COVGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, COVGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getCoveredContentsAccess().getAlternatives(), "rule__CoveredContents__Alternatives");
			builder.put(grammarAccess.getConditionTypeAccess().getAlternatives(), "rule__ConditionType__Alternatives");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getGroup(), "rule__DomainSpecificCoverage__Group__0");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getGroup_7(), "rule__DomainSpecificCoverage__Group_7__0");
			builder.put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
			builder.put(grammarAccess.getContextAccess().getGroup_3(), "rule__Context__Group_3__0");
			builder.put(grammarAccess.getContextAccess().getGroup_3_1(), "rule__Context__Group_3_1__0");
			builder.put(grammarAccess.getIgnoreAccess().getGroup(), "rule__Ignore__Group__0");
			builder.put(grammarAccess.getIgnoreAccess().getGroup_3(), "rule__Ignore__Group_3__0");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getGroup(), "rule__CoverageOfReferenced__Group__0");
			builder.put(grammarAccess.getCoverageByContentAccess().getGroup(), "rule__CoverageByContent__Group__0");
			builder.put(grammarAccess.getConditionalIgnoreAccess().getGroup(), "rule__ConditionalIgnore__Group__0");
			builder.put(grammarAccess.getConditionalIgnoreAccess().getGroup_7(), "rule__ConditionalIgnore__Group_7__0");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getNameAssignment_1(), "rule__DomainSpecificCoverage__NameAssignment_1");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getMetamodelAssignment_5(), "rule__DomainSpecificCoverage__MetamodelAssignment_5");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getContextsAssignment_6(), "rule__DomainSpecificCoverage__ContextsAssignment_6");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getContextsAssignment_7_1(), "rule__DomainSpecificCoverage__ContextsAssignment_7_1");
			builder.put(grammarAccess.getContextAccess().getMetaclassAssignment_1(), "rule__Context__MetaclassAssignment_1");
			builder.put(grammarAccess.getContextAccess().getRulesAssignment_3_0(), "rule__Context__RulesAssignment_3_0");
			builder.put(grammarAccess.getContextAccess().getRulesAssignment_3_1_1(), "rule__Context__RulesAssignment_3_1_1");
			builder.put(grammarAccess.getIgnoreAccess().getIgnoreSubtypesAssignment_3_1(), "rule__Ignore__IgnoreSubtypesAssignment_3_1");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getReferenceAssignment_3(), "rule__CoverageOfReferenced__ReferenceAssignment_3");
			builder.put(grammarAccess.getCoverageByContentAccess().getContainmentReferenceAssignment_3(), "rule__CoverageByContent__ContainmentReferenceAssignment_3");
			builder.put(grammarAccess.getCoverageByContentAccess().getMultiplicityAssignment_5(), "rule__CoverageByContent__MultiplicityAssignment_5");
			builder.put(grammarAccess.getConditionalIgnoreAccess().getConditionAssignment_3(), "rule__ConditionalIgnore__ConditionAssignment_3");
			builder.put(grammarAccess.getConditionalIgnoreAccess().getContainerTypeAssignment_6(), "rule__ConditionalIgnore__ContainerTypeAssignment_6");
			builder.put(grammarAccess.getConditionalIgnoreAccess().getContainerTypeAssignment_7_1(), "rule__ConditionalIgnore__ContainerTypeAssignment_7_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private COVGrammarAccess grammarAccess;

	@Override
	protected InternalCOVParser createParser() {
		InternalCOVParser result = new InternalCOVParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public COVGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(COVGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
