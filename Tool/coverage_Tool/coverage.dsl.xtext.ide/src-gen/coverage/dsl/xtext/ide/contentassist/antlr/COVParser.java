/*
 * generated by Xtext 2.28.0
 */
package coverage.dsl.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import coverage.dsl.xtext.ide.contentassist.antlr.internal.InternalCOVParser;
import coverage.dsl.xtext.services.COVGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class COVParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(COVGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, COVGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCoverageMetricAccess().getAlternatives(), "rule__CoverageMetric__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getCoveredContentsAccess().getAlternatives(), "rule__CoveredContents__Alternatives");
			builder.put(grammarAccess.getLimitationTypeAccess().getAlternatives(), "rule__LimitationType__Alternatives");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getGroup(), "rule__DomainSpecificCoverage__Group__0");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getGroup_7(), "rule__DomainSpecificCoverage__Group_7__0");
			builder.put(grammarAccess.getModelElementCoverageAccess().getGroup(), "rule__ModelElementCoverage__Group__0");
			builder.put(grammarAccess.getModelElementCoverageAccess().getGroup_3(), "rule__ModelElementCoverage__Group_3__0");
			builder.put(grammarAccess.getBranchCoverageAccess().getGroup(), "rule__BranchCoverage__Group__0");
			builder.put(grammarAccess.getBranchCoverageAccess().getGroup_2(), "rule__BranchCoverage__Group_2__0");
			builder.put(grammarAccess.getBranchCoverageAccess().getGroup_2_1(), "rule__BranchCoverage__Group_2_1__0");
			builder.put(grammarAccess.getBranchCoverageAccess().getGroup_4(), "rule__BranchCoverage__Group_4__0");
			builder.put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
			builder.put(grammarAccess.getContextAccess().getGroup_3(), "rule__Context__Group_3__0");
			builder.put(grammarAccess.getContextAccess().getGroup_3_1(), "rule__Context__Group_3_1__0");
			builder.put(grammarAccess.getIgnoreAccess().getGroup(), "rule__Ignore__Group__0");
			builder.put(grammarAccess.getIgnoreAccess().getGroup_3(), "rule__Ignore__Group_3__0");
			builder.put(grammarAccess.getIgnoreAccess().getGroup_5(), "rule__Ignore__Group_5__0");
			builder.put(grammarAccess.getIgnoreAccess().getGroup_6(), "rule__Ignore__Group_6__0");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getGroup(), "rule__LimitedIgnore__Group__0");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getGroup_3(), "rule__LimitedIgnore__Group_3__0");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getGroup_4(), "rule__LimitedIgnore__Group_4__0");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getGroup_5(), "rule__LimitedIgnore__Group_5__0");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getGroup(), "rule__CoverageOfReferenced__Group__0");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getGroup_2(), "rule__CoverageOfReferenced__Group_2__0");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getGroup_3(), "rule__CoverageOfReferenced__Group_3__0");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getGroup_4(), "rule__CoverageOfReferenced__Group_4__0");
			builder.put(grammarAccess.getCoverageByContentAccess().getGroup(), "rule__CoverageByContent__Group__0");
			builder.put(grammarAccess.getCoverageByContentAccess().getGroup_5(), "rule__CoverageByContent__Group_5__0");
			builder.put(grammarAccess.getCoverageByContentAccess().getGroup_6(), "rule__CoverageByContent__Group_6__0");
			builder.put(grammarAccess.getBranchSpecificationAccess().getGroup(), "rule__BranchSpecification__Group__0");
			builder.put(grammarAccess.getBranchSpecificationAccess().getGroup_3(), "rule__BranchSpecification__Group_3__0");
			builder.put(grammarAccess.getBranchSpecificationAccess().getGroup_5(), "rule__BranchSpecification__Group_5__0");
			builder.put(grammarAccess.getBranchSpecificationAccess().getGroup_7(), "rule__BranchSpecification__Group_7__0");
			builder.put(grammarAccess.getBranchAccess().getGroup(), "rule__Branch__Group__0");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getNameAssignment_1(), "rule__DomainSpecificCoverage__NameAssignment_1");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getMetamodelAssignment_5(), "rule__DomainSpecificCoverage__MetamodelAssignment_5");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getCoverageMetricsAssignment_6(), "rule__DomainSpecificCoverage__CoverageMetricsAssignment_6");
			builder.put(grammarAccess.getDomainSpecificCoverageAccess().getCoverageMetricsAssignment_7_1(), "rule__DomainSpecificCoverage__CoverageMetricsAssignment_7_1");
			builder.put(grammarAccess.getModelElementCoverageAccess().getContextsAssignment_2(), "rule__ModelElementCoverage__ContextsAssignment_2");
			builder.put(grammarAccess.getModelElementCoverageAccess().getContextsAssignment_3_1(), "rule__ModelElementCoverage__ContextsAssignment_3_1");
			builder.put(grammarAccess.getBranchCoverageAccess().getContextsAssignment_2_0(), "rule__BranchCoverage__ContextsAssignment_2_0");
			builder.put(grammarAccess.getBranchCoverageAccess().getContextsAssignment_2_1_1(), "rule__BranchCoverage__ContextsAssignment_2_1_1");
			builder.put(grammarAccess.getBranchCoverageAccess().getBranchSpecificationsAssignment_3(), "rule__BranchCoverage__BranchSpecificationsAssignment_3");
			builder.put(grammarAccess.getBranchCoverageAccess().getBranchSpecificationsAssignment_4_1(), "rule__BranchCoverage__BranchSpecificationsAssignment_4_1");
			builder.put(grammarAccess.getContextAccess().getMetaclassAssignment_1(), "rule__Context__MetaclassAssignment_1");
			builder.put(grammarAccess.getContextAccess().getRulesAssignment_3_0(), "rule__Context__RulesAssignment_3_0");
			builder.put(grammarAccess.getContextAccess().getRulesAssignment_3_1_1(), "rule__Context__RulesAssignment_3_1_1");
			builder.put(grammarAccess.getIgnoreAccess().getIgnoreSubtypesAssignment_3_1(), "rule__Ignore__IgnoreSubtypesAssignment_3_1");
			builder.put(grammarAccess.getIgnoreAccess().getDescriptionAssignment_5_1(), "rule__Ignore__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getIgnoreAccess().getConditionAssignment_6_1(), "rule__Ignore__ConditionAssignment_6_1");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getTypeAssignment_1(), "rule__LimitedIgnore__TypeAssignment_1");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getContainerMetaclassAssignment_2(), "rule__LimitedIgnore__ContainerMetaclassAssignment_2");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getContainerMetaclassAssignment_3_1(), "rule__LimitedIgnore__ContainerMetaclassAssignment_3_1");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getDescriptionAssignment_4_1(), "rule__LimitedIgnore__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getLimitedIgnoreAccess().getConditionAssignment_5_1(), "rule__LimitedIgnore__ConditionAssignment_5_1");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getReferenceAssignment_1(), "rule__CoverageOfReferenced__ReferenceAssignment_1");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getReferenceAssignment_2_1(), "rule__CoverageOfReferenced__ReferenceAssignment_2_1");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getDescriptionAssignment_3_1(), "rule__CoverageOfReferenced__DescriptionAssignment_3_1");
			builder.put(grammarAccess.getCoverageOfReferencedAccess().getConditionAssignment_4_1(), "rule__CoverageOfReferenced__ConditionAssignment_4_1");
			builder.put(grammarAccess.getCoverageByContentAccess().getMultiplicityAssignment_2(), "rule__CoverageByContent__MultiplicityAssignment_2");
			builder.put(grammarAccess.getCoverageByContentAccess().getContainmentReferenceAssignment_3(), "rule__CoverageByContent__ContainmentReferenceAssignment_3");
			builder.put(grammarAccess.getCoverageByContentAccess().getDescriptionAssignment_5_1(), "rule__CoverageByContent__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getCoverageByContentAccess().getConditionAssignment_6_1(), "rule__CoverageByContent__ConditionAssignment_6_1");
			builder.put(grammarAccess.getBranchSpecificationAccess().getDescriptionAssignment_3_1(), "rule__BranchSpecification__DescriptionAssignment_3_1");
			builder.put(grammarAccess.getBranchSpecificationAccess().getContextAssignment_4(), "rule__BranchSpecification__ContextAssignment_4");
			builder.put(grammarAccess.getBranchSpecificationAccess().getConditionAssignment_5_1(), "rule__BranchSpecification__ConditionAssignment_5_1");
			builder.put(grammarAccess.getBranchSpecificationAccess().getBranchesAssignment_6(), "rule__BranchSpecification__BranchesAssignment_6");
			builder.put(grammarAccess.getBranchSpecificationAccess().getBranchesAssignment_7_1(), "rule__BranchSpecification__BranchesAssignment_7_1");
			builder.put(grammarAccess.getBranchAccess().getOCLQueryAssignment_1(), "rule__Branch__OCLQueryAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getOCLConstraintAssignment(), "rule__Condition__OCLConstraintAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private COVGrammarAccess grammarAccess;

	@Override
	protected InternalCOVParser createParser() {
		InternalCOVParser result = new InternalCOVParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public COVGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(COVGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
